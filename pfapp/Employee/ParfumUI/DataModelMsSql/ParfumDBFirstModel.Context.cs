//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ParfumUI.DataModelMsSql
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ParfumeEntitiesDb : DbContext
    {
        public ParfumeEntitiesDb()
            : base("name=ParfumeEntitiesDb")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Brend> Brends { get; set; }
        public virtual DbSet<CategoryToParfum> CategoryToParfums { get; set; }
        public virtual DbSet<Catogory> Catogories { get; set; }
        public virtual DbSet<Density> Densities { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<Parfume> Parfumes { get; set; }
        public virtual DbSet<Sale> Sales { get; set; }
        public virtual DbSet<SalePrice> SalePrices { get; set; }
        public virtual DbSet<Size> Sizes { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<ActiveUserTable> ActiveUserTables { get; set; }
        public virtual DbSet<CategoryListParfum> CategoryListParfums { get; set; }
        public virtual DbSet<DeleteHeader> DeleteHeaders { get; set; }
        public virtual DbSet<DeleteSalePirceUI> DeleteSalePirceUIs { get; set; }
        public virtual DbSet<DeleteUpdateCategoryToParfum> DeleteUpdateCategoryToParfums { get; set; }
        public virtual DbSet<DeleteUpdateHeader> DeleteUpdateHeaders { get; set; }
        public virtual DbSet<FullDetailParfum> FullDetailParfums { get; set; }
        public virtual DbSet<MidDetalParfume> MidDetalParfumes { get; set; }
        public virtual DbSet<MidDetalParfumeForUpdate> MidDetalParfumeForUpdates { get; set; }
        public virtual DbSet<ParfumLoginUser> ParfumLoginUsers { get; set; }
        public virtual DbSet<SaleActivity> SaleActivities { get; set; }
        public virtual DbSet<SaleActivityMonitor> SaleActivityMonitors { get; set; }
        public virtual DbSet<SaleActivity1> SaleActivitys { get; set; }
        public virtual DbSet<SaleActivitysIsUser> SaleActivitysIsUsers { get; set; }
        public virtual DbSet<SaleDetailParfum> SaleDetailParfums { get; set; }
        public virtual DbSet<SalePirceUI> SalePirceUIs { get; set; }
        public virtual DbSet<SearchHead> SearchHeads { get; set; }
    
        public virtual int InsertSales(string userName, Nullable<int> salePriceId, Nullable<int> count, Nullable<int> total)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var salePriceIdParameter = salePriceId.HasValue ?
                new ObjectParameter("SalePriceId", salePriceId) :
                new ObjectParameter("SalePriceId", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSales", userNameParameter, salePriceIdParameter, countParameter, totalParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_AddParfum(string name, byte[] image, string descriptio, string brend, string gender, string density)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var descriptioParameter = descriptio != null ?
                new ObjectParameter("Descriptio", descriptio) :
                new ObjectParameter("Descriptio", typeof(string));
    
            var brendParameter = brend != null ?
                new ObjectParameter("Brend", brend) :
                new ObjectParameter("Brend", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var densityParameter = density != null ?
                new ObjectParameter("Density", density) :
                new ObjectParameter("Density", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddParfum", nameParameter, imageParameter, descriptioParameter, brendParameter, genderParameter, densityParameter);
        }
    
        public virtual int usp_DeleteParfum(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteParfum", idParameter);
        }
    
        public virtual int usp_DeletePrice(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeletePrice", idParameter);
        }
    
        public virtual int usp_InsertCategoryToParfum(Nullable<int> parfumId, string category)
        {
            var parfumIdParameter = parfumId.HasValue ?
                new ObjectParameter("ParfumId", parfumId) :
                new ObjectParameter("ParfumId", typeof(int));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertCategoryToParfum", parfumIdParameter, categoryParameter);
        }
    
        public virtual int usp_InsertSaleAdmin(string name, Nullable<int> salePrice, Nullable<int> count, Nullable<int> total, Nullable<System.DateTime> date)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertSaleAdmin", nameParameter, salePriceParameter, countParameter, totalParameter, dateParameter);
        }
    
        public virtual int usp_InsertSalePrice(Nullable<int> parfumId, Nullable<int> size, Nullable<int> price, Nullable<int> number)
        {
            var parfumIdParameter = parfumId.HasValue ?
                new ObjectParameter("ParfumId", parfumId) :
                new ObjectParameter("ParfumId", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertSalePrice", parfumIdParameter, sizeParameter, priceParameter, numberParameter);
        }
    
        public virtual int usp_RemoveCategoryToParfume(string header, string category)
        {
            var headerParameter = header != null ?
                new ObjectParameter("Header", header) :
                new ObjectParameter("Header", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RemoveCategoryToParfume", headerParameter, categoryParameter);
        }
    
        public virtual ObjectResult<usp_SaleShowCategoryParfums_Result> usp_SaleShowCategoryParfums(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SaleShowCategoryParfums_Result>("usp_SaleShowCategoryParfums", nameParameter);
        }
    
        public virtual ObjectResult<usp_SelectIdSalePirce_Result> usp_SelectIdSalePirce(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectIdSalePirce_Result>("usp_SelectIdSalePirce", idParameter);
        }
    
        public virtual ObjectResult<usp_ShowCategoryParfums_Result> usp_ShowCategoryParfums(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ShowCategoryParfums_Result>("usp_ShowCategoryParfums", nameParameter);
        }
    
        public virtual int usp_UpdateParfum(Nullable<int> id, string name, byte[] image, string descriptio, string brend, string gender, string density)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var descriptioParameter = descriptio != null ?
                new ObjectParameter("Descriptio", descriptio) :
                new ObjectParameter("Descriptio", typeof(string));
    
            var brendParameter = brend != null ?
                new ObjectParameter("Brend", brend) :
                new ObjectParameter("Brend", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var densityParameter = density != null ?
                new ObjectParameter("Density", density) :
                new ObjectParameter("Density", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateParfum", idParameter, nameParameter, imageParameter, descriptioParameter, brendParameter, genderParameter, densityParameter);
        }
    
        public virtual int usp_UpdateSalePrice(Nullable<int> prId, Nullable<int> size, Nullable<int> newSize, Nullable<int> price, Nullable<int> count)
        {
            var prIdParameter = prId.HasValue ?
                new ObjectParameter("PrId", prId) :
                new ObjectParameter("PrId", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(int));
    
            var newSizeParameter = newSize.HasValue ?
                new ObjectParameter("NewSize", newSize) :
                new ObjectParameter("NewSize", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateSalePrice", prIdParameter, sizeParameter, newSizeParameter, priceParameter, countParameter);
        }
    }
}
